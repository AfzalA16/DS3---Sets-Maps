import java.io.*;
import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.Scanner;

public class DS3_SetJoins
{
    public static void main(String[] args)
    {

        // no arraylist in main
        // GETS INPUT FROM KEYBOARD FOR FILENAME
        Scanner j=new Scanner(System.in);
        System.out.println("Enter the file name: ");
        String textFile= j.nextLine();
        DS3_Set<Integer> set1= new DS3_Set<>();
        DS3_Set<Integer> set2= new DS3_Set<>();


        try
        {


            // TRY BLOCK SHOULD ONLY READ FILE AND CONVERT IT TO A QUEUE USING MYQUEUE
//            File testPrint= new File("Files\\"+textFile);
            Scanner fromFile= new Scanner(new File(textFile));
            int jobNum=1;


            Scanner fromText = new Scanner(fromFile.nextLine());
            while (fromText.hasNextInt())
            {
                set1.add(fromText.nextInt());
            }

            fromText = new Scanner(fromFile.nextLine());
            while (fromText.hasNextInt())
            {
                set2.add(fromText.nextInt());
            }


            fromFile.close();
            fromText.close();

        }

        catch(Exception e)
        {
            // Displays that there was an error and what the error was
            System.out.println("Error while reading from file:");
            e.printStackTrace();
            System.exit(0);
        }
        finally
        {

        }
        // processes for printing out original sets
        ArrayList<Integer> setA= new ArrayList<>();
        Iterator<Integer> iterator = set1.iterator();
        while (iterator.hasNext())
        {
            setA.add(iterator.next());
        }
        System.out.println("Set A: "+setA);


        ArrayList<Integer> setB= new ArrayList<>();
        Iterator<Integer> iterator2 = set2.iterator();
        while (iterator2.hasNext())
        {
            setB.add(iterator2.next());
        }
        System.out.println("Set B: "+setB);
        System.out.println();


        // Union Set

        // adds all elements of both sets into a single set; since setUnion is a set all duplicate elements will be automatically rejected from entering the set
        DS3_Set<Integer> setUnion= new DS3_Set<>();

        Iterator<Integer> iterator3 = set1.iterator();
        while (iterator3.hasNext())
        {
            setUnion.add(iterator3.next());
        }

        Iterator<Integer> iterator4 = set2.iterator();
        while (iterator4.hasNext())
        {
            setUnion.add(iterator4.next());
        }

        // adds all elements into an arraylist in order to call collections.sort
        ArrayList<Integer> unionList= new ArrayList<>();

        // creates an iterator of unionSet to add its elements into the Array

        Iterator<Integer> iterator5 = setUnion.iterator();
        while (iterator5.hasNext())
        {
            unionList.add(iterator5.next());
        }

        Collections.sort(unionList);
        System.out.println("Union: "+unionList);

        // Intersection

        DS3_Set<Integer> intersectionSet= new DS3_Set<>();

        for (int set1Values: setA)
        {
            for (int set2Values: setB)
            {
                if (set1Values==set2Values)
                {
                    intersectionSet.add(set1Values);
                }
            }
        }


        ArrayList<Integer> intersectionList= new ArrayList<>();
        Iterator<Integer> intersectionIterator = intersectionSet.iterator();
        while (intersectionIterator.hasNext())
        {
            intersectionList.add(intersectionIterator.next());
        }

        Collections.sort(intersectionList);
        System.out.println("Intersection: "+intersectionList);

        // Elements in A not in B


        ArrayList<Integer> inANotB= new ArrayList<>();

        for (int  setAValue: setA )
        {
            if (!setB.contains(setAValue))
            {
                inANotB.add(setAValue);
            }
        }

        Collections.sort(inANotB);
        System.out.println("A - B (Elements in A not in B): "+inANotB);

        // Elements in B not in A

        ArrayList<Integer> inBNotA= new ArrayList<>();

        for (int  setBValue: setB )
        {
            if (!setA.contains(setBValue))
            {
                inBNotA.add(setBValue);
            }
        }

        Collections.sort(inBNotA);
        System.out.println("B - A (Elements in B not in A): "+inBNotA);



















    }
}
