import java.util.ArrayList;

public class DS3_Map<K,V>implements MapInterface<K,V>
{
    ArrayList<MapEnt<K,V>> bobbert= new ArrayList<MapEnt<K,V>>();

    @Override
    public void clear()
    {
        bobbert.clear();

    }

    @Override
    public boolean containsKey(K key)
    {
        for (int i=0; i<bobbert.size();i++)
        {
            if (bobbert.get(i).getKey().equals(key))
                return true;
        }
        return false;
    }

    @Override
    public boolean containsValue(V value)
    {
        for (int i=0; i<bobbert.size();i++)
        {
            if (bobbert.get(i).getValue().equals(value))
                return true;
        }
        return false;
    }

    @Override
    public DS3_Set<MapEnt<K, V>> entrySet()
    {
        DS3_Set<MapEnt<K,V>> set= new DS3_Set<>();


        for (MapEnt<K, V> entry: bobbert)
        {
            set.add(entry);
        }
        return set;
    }

    @Override
    public V get(K o)
    {
        for (MapEnt<K, V> Key:bobbert)
        {
            if (Key.getKey().equals(o))
            {
                return Key.getValue();
            }
        }

        return null;
    }

    @Override
    public boolean isEmpty()
    {
        return bobbert.isEmpty();
    }

    @Override
    public V put(K key, V value)
    {
        for (int i=0; i< bobbert.size();i++)
        {
            if (bobbert.get(i).getKey().equals(key))
            {
                V replacedVal=bobbert.get(i).getValue();
                bobbert.set(i, new MapEnt<>(key,value));
                return replacedVal;
            }
        }
        bobbert.add(new MapEnt<>(key,value));
        return null;
    }

    @Override
    public int size()
    {
        return bobbert.size();
    }

    @Override
    public DS3_Set<K> keySet()
    {
        DS3_Set<K> set= new DS3_Set<>();
        for (MapEnt<K, V> key:bobbert)
        {
            set.add(key.getKey());
        }
        return set;
    }

    @Override
    public ArrayList<V> values()
    {
        ArrayList<V> values= new ArrayList<>();
       for (MapEnt<K,V> value: bobbert)
       {
           values.add(value.getValue());
       }
       return values;
    }

    @Override
    public V remove(K key)
    {
        for (int i=0; i<bobbert.size();i++)
        {
            if (bobbert.get(i).getKey().equals(key))
            {
                V j= bobbert.get(i).getValue();
                bobbert.remove(bobbert.get(i));
                return j;
            }
        }
        return null;

    }
}
